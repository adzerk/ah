#!/usr/bin/env bash

OLD_IFS="$IFS"

echo -n "Loading options..."
AZS=$(aws ec2 describe-availability-zones |jt AvailabilityZones [ ZoneName % ])
IFS=$'\n'
VPCS=($(IFS="$OLD_IFS" aws ec2 describe-vpcs |jt Vpcs [ VpcId % ] [ Tags [ Key % ] [ Value % ] ] |sort |awk -F '	' '$2 == "Name" {print $1 "|" $3}'))
SUBNETS=$(IFS="$OLD_IFS" aws ec2 describe-subnets |jt Subnets [ VpcId % ] [ SubnetId % ] [ AvailabilityZone % ] |sort)
IFS="$OLD_IFS"
IMAGES=$(aws ec2 describe-images --owners $(ah_account_id) |jt Images [ ImageId % ] [ Name % ])
KEYS=$(aws ec2 describe-key-pairs --no-paginate |jt KeyPairs [ KeyName % ])
ORGS=$(ah_s3_ls etc |sed 's@\.conf$@@')
associate_public_ips=n
echo "done."

dfl="$template"
PS3="Org to use as a template? [${template:-$dfl}] "
select template in $ORGS; do
  if [[ -n "$template" || -n "$dfl" ]]; then
    export template="${template:=$dfl}"
    . <(aws s3 cp s3://$(ah_var AH_BUCKET)/etc/${template}.conf - \
        --region $AH_MASTER_REGION \
        |grep . |sed 's@^@export @')
    break
  fi
done

while true; do
  dfl="$AH_VPC"
  PS3="[AH_VPC] Launch into VPC? [${AH_VPC:-$dfl}] "
  select AH_VPC in "NO VPC" "${VPCS[@]}"; do
    if [[ $AH_VPC ]]; then
      case "$AH_VPC" in
        "NO VPC") AH_VPC="" ; break ;;
        *) AH_VPC="$(echo "${AH_VPC:=$dfl}" |sed 's@|.*$@@')" ; break ;;
      esac
    elif [[ -n $dfl ]]; then
      AH_VPC=$dfl
      break
    fi
  done
  export AH_VPC

  if [[ ! $AH_VPC ]]; then
    dfl="$AH_CLASSIC_LINK_VPC"
    PS3="[AH_CLASSIC_LINK_VPC] Enable classic link to VPC? [${AH_CLASSIC_LINK_VPC:-$dfl}] "
    select AH_CLASSIC_LINK_VPC in "NO VPC" "${VPCS[@]}"; do
      if [[ $AH_CLASSIC_LINK_VPC ]]; then
        case "$AH_CLASSIC_LINK_VPC" in
          "NO VPC") AH_CLASSIC_LINK_VPC="" ; break ;;
          *) AH_CLASSIC_LINK_VPC="$(echo "${AH_CLASSIC_LINK_VPC:=$dfl}" |sed 's@|.*$@@')" ; break ;;
        esac
      elif [[ -n $dfl ]]; then
        AH_CLASSIC_LINK_VPC=$dfl
        break
      fi
    done
    export AH_CLASSIC_LINK_VPC

    dfl="$AH_AZS"
    ah_multiselect AH_AZS "$AZS" "[AH_AZS] Availability zones in which to launch instances (ENTER when done): "
    export AH_AZS="${AH_AZS:=$dfl}"
  else
    sn=$(echo "$SUBNETS" |awk "\$1 == \"$AH_VPC\" {print \$2 \"\t\" \$3}")
    dfl="$AH_SUBNETS"
    ah_multiselect AH_SUBNETS "$sn" "[AH_SUBNETS] Subnets for VPC (ENTER when done): "
    export AH_SUBNETS="${AH_SUBNETS:=$dfl}"

    dfl="$associate_public_ips"
    read -p "[AH_PUBLIC] Assign public IPs to instances (y/n)? [${AH_PUBLIC:-$dfl}] " AH_PUBLIC
    export AH_PUBLIC="${AH_PUBLIC:=$dfl}"
  fi

  dfl="$AH_BILLING_GROUP"
  read -p "[AH_BILLING_GROUP] Billing group? [${AH_BILLING_GROUP:-$dfl}] " AH_BILLING_GROUP
  export AH_BILLING_GROUP="${AH_BILLING_GROUP:=$dfl}"

  dfl="$AH_BILLING_PROJECT"
  read -p "[AH_BILLING_PROJECT] Billing project? [${AH_BILLING_PROJECT:-$dfl}] " AH_BILLING_PROJECT
  export AH_BILLING_PROJECT="${AH_BILLING_PROJECT:=$dfl}"

  dfl="$AH_MACHINE_IMAGE"
  PS3="[AH_MACHINE_IMAGE] Machine image? [${AH_MACHINE_IMAGE:-$dfl}] "
  select AH_MACHINE_IMAGE in $(echo "$IMAGES" |cut -f2 |sort); do
    [[ -n "${AH_MACHINE_IMAGE:-$dfl}" ]] && break
  done
  export AH_MACHINE_IMAGE="${AH_MACHINE_IMAGE:=$dfl}"

  dfl="$AH_KEY_PAIR"
  PS3="[AH_KEY_PAIR] Key pair? [${AH_KEY_PAIR:-$dfl}] "
  select AH_KEY_PAIR in $(echo "$KEYS" |sort); do
    [[ -n "${AH_KEY_PAIR:-$dfl}" ]] && break
  done
  export AH_KEY_PAIR="${AH_KEY_PAIR:=$dfl}"

  dfl="m3.medium"
  read -p "[AH_INSTANCE_TYPE] Instance type? [${AH_INSTANCE_TYPE:-$dfl}] " AH_INSTANCE_TYPE
  export AH_INSTANCE_TYPE="${AH_INSTANCE_TYPE:=$dfl}"

  vars=$(set |grep -E "^AH_($(if [[ -z "$AH_SUBNETS" ]] ; then echo "AZS|" ; fi)|BILLING_GROUP|BILLING_PROJECT|ENV|MACHINE_IMAGE|KEY_PAIR|INSTANCE_TYPE|VPC|SUBNETS|CLASSIC_LINK_VPC)=")

  echo
  echo "$vars"
  echo

  read -sn 1 -p "Approve? [yN] " approve
  [[ "$approve" == "y" ]] && echo && break;

  echo
  echo "Okay, starting over (ctrl-c to abort)."
  echo
done

ah_check "app policy exists" ah_policy_exists || ah_die "aborted."
ah_check "SG does not already exist" ah_not ah_sg_exists $(ah_var AH_ENV) || ah_die "aborted."
ah_check "role does not already exist" ah_not ah_role_exists $AH_ENV || ah_die "aborted."
ah_check "instance profile does not already exist" ah_not ah_instance_profile_exists $AH_ENV || ah_die "aborted."
ah_check "launch configuration does not already exist" ah_not ah_launch_config_exists $AH_ENV || ah_die "aborted."
ah_check "autoscaling group does not already exist" ah_not ah_asg_exists $AH_ENV || ah_die "aborted."

EC2_ASSUME_ROLE=$(cat <<EOT
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      }
    }
  ]
}
EOT
)

echo -n "Creating role..."
aws iam create-role \
  --path /ah/ \
  --role-name $AH_ENV \
  --assume-role-policy-document "$EC2_ASSUME_ROLE" \
  > /dev/null
echo done.

echo -n "Attaching app policy..."
aws iam attach-role-policy \
  --role-name $AH_ENV \
  --policy-arn $(ah_policy_arn ah/$AH_APP) \
  > /dev/null
echo done.

echo -n "Creating instance profile..."
aws iam create-instance-profile \
  --path /ah/ \
  --instance-profile-name $AH_ENV \
  > /dev/null
echo done.

echo -n "Adding role to instance profile..."
aws iam add-role-to-instance-profile \
  --role-name $AH_ENV \
  --instance-profile-name $AH_ENV \
  > /dev/null
echo done.

# creating security groups:
# -vpc                create vpc sg
# -classic link       create vpc sg and ec2 classic sg
# -ec2 classic        create ec2 classic sg

echo -n "Creating SG(s)..."
if [[ $AH_VPC ]]; then
  more_opts="--vpc-id ${AH_VPC}"
elif [[ $AH_CLASSIC_LINK_VPC ]]; then
  more_opts="--vpc-id ${AH_CLASSIC_LINK_VPC}"
  # for classic link we create an sg in the vpc and in ec2 classic
  aws ec2 create-security-group \
      --group-name $AH_ENV \
      --description "Ah security group for the $AH_ENV environment, $AH_APP application." \
      > /dev/null
fi
sg_id=$(aws ec2 create-security-group \
            --group-name $AH_ENV \
            --description "Ah security group for the $AH_ENV environment, $AH_APP application." \
            $more_opts \
          |jt GroupId %)
[[ ! $sg_id ]] && ah_die "could not create security group"
echo done.

AH_MACHINE_IMAGE_ID=$(echo "$IMAGES" |awk "\$2 ==\"$AH_MACHINE_IMAGE\" {print \$1}")

region=$(aws configure list |awk '$1 == "region" {print $2}')
AZS=$(echo $AH_AZS |tr '[ ]' '[,]' |awk -vRS=, '{print}' |grep . |sed "s/^/$region/")

echo -n "Creating launch configuration..."
if [[ $AH_VPC ]]; then
  if [[ $AH_PUBLIC == y ]]; then
    more_lc_opts="--associate-public-ip-address"
  else
    more_lc_opts="--no-associate-public-ip-address"
  fi
fi
if [[ $AH_CLASSIC_LINK_VPC ]]; then
  more_lc_opts="$more_lc_opts --classic-link-vpc-id $AH_CLASSIC_LINK_VPC --classic-link-vpc-security-groups $sg_id"
fi

tmp=$(mktemp)
trap "rm -f $tmp" EXIT

while true ; do
  aws autoscaling create-launch-configuration \
    --launch-configuration-name $AH_ENV \
    --image-id $AH_MACHINE_IMAGE_ID \
    --key-name $AH_KEY_PAIR \
    --security-groups $(ah_sg_id_by_name $AH_ENV) \
    --user-data "$(cat $AH_SHR/user-data.sh |envsubst '$AH_APP:$AH_ENV:$AH_BUCKET:$AH_MASTER_REGION')" \
    --instance-type $AH_INSTANCE_TYPE \
    --iam-instance-profile $(ah_instance_profile_arn ah/$AH_ENV) \
    $more_lc_opts \
    > /dev/null \
    2> "$tmp" \
    && echo done. \
    && break
  echo failed.
  echo -n "$(cat "$tmp")"
  echo -n "Retrying..."
done

echo -n "Creating autoscaling group..."
if [[ $AH_SUBNETS ]]; then
  more_opts="--vpc-zone-identifier ${AH_SUBNETS}"
else
  more_opts="--availability-zones ${AZS}"
fi
aws autoscaling create-auto-scaling-group \
  --auto-scaling-group-name $AH_ENV \
  --launch-configuration-name $AH_ENV \
  --min-size 0 \
  --max-size 0 \
  --desired-capacity 0 \
  --tags "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhApplication,Value=$AH_APP" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhEnvironment,Value=$AH_ENV" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=Name,Value=$AH_ENV" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingGroup,Value=$AH_BILLING_GROUP" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingProject,Value=$AH_BILLING_PROJECT" \
  $more_opts \
  > /dev/null
echo done.
