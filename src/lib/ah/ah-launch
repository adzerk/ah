#!/usr/bin/env bash

: $(ah_var AH_APP) $(ah_var AH_ENV) # Make sure these vars are defined.

policies_script=.ah/launch/inline_policies.sh

save_asg_config() {
  printenv |grep -E '^AH_ENV_(ASG|VPC|AZS|LC|SUBNETS)=' |sort
}

save_lc_config() {
  printenv |grep -E '^AH_ENV_(PUBLIC_IP|CL_VPC_SGS|PROFILE|IMAGE|TYPE|KEY|SGS|USER_DATA)=' |sort
}

save_role_config() {
  role_policy_inline_json "$AH_ENV_INLINE_POLICY" |jq -S . |jt %
}

role_policy_json=$(cat <<EOT |jt %
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      }
    }
  ]
}
EOT
)

default_policies=$(cat <<EOT
{
  "Effect": "Allow",
  "Action": [
    "ec2:DescribeTags"
  ],
  "Resource": [
    "*"
  ]
}
EOT
)

role_policy_inline_json() {
  local statements=$(echo "$1" |jt % |paste -sd,)
  cat <<EOT |jt %
{
  "Version": "2012-10-17",
  "Statement": [
    $statements
  ]
}
EOT
}

ah_info "Loading AWS configuration info..."

avail_azs=$(aws ec2 describe-availability-zones \
  |jt AvailabilityZones [ ZoneName % ])

avail_vpcs=$(aws ec2 describe-vpcs \
  |jt Vpcs [ VpcId % ] [ Tags [ Key % ] [ Value % ] ] \
  |sort \
  |awk -F ' ' '$2 == "Name" {print $1 "\t" $3}')

avail_subnets=$(aws ec2 describe-subnets \
  |jt Subnets [ VpcId % ] [ SubnetId % ] [ AvailabilityZone % ] [ CidrBlock % ] \
  |awk -F '	' '{print $1 "\t" $2 "\t" $3 " " $4}' \
  |sort -k3)

avail_images=$(aws ec2 describe-images --owners $(ah_account_id) \
  |jt Images [ ImageId % ] [ Name % ] \
  |sort -k2)

avail_sgs=$(aws ec2 describe-security-groups \
  |jt . [ VpcId % ] [ GroupId % ] [ GroupName % ])

avail_instance_types=$(cat "${AH_LIB}/instance-types.txt")

avail_keys=$(aws ec2 describe-key-pairs --no-paginate \
  |jt KeyPairs [ KeyName % ])

avail_orgs=$(ah_s3_ls etc |sed 's@\.conf$@@')

vpc_avail_sgs() {
  echo "$avail_sgs" \
    |awk -F\\t "$(printf '$1 == "%s" {OFS="\t"; print $2, $3}' $1)"
}

ah_success "OK.\n"

ah_info "Loading env configuration info..."
. <(ah_env_info $AH_ENV |sed 's@^@export @')
ah_success "OK.\n"

if [[ $AH_ENV_ASG ]]; then
  update=true
  AH_ASG_SAVED=$(save_asg_config)
  AH_LC_SAVED=$(save_lc_config)
  AH_ROLE_SAVED=$(save_role_config)
  AH_ENV_INLINE_POLICY_SAVED=$AH_ENV_INLINE_POLICY
else
  update=false
  ah_check "app policy exists" ah_policy_exists || ah_die "aborted."
  ah_check "role does not already exist" ah_not ah_role_exists $AH_ENV || ah_die "aborted."
  ah_check "instance profile does not already exist" ah_not ah_instance_profile_exists $AH_ENV || ah_die "aborted."
fi

if ! $update; then
  while ah_select -p "Org to use as a template? " template "$avail_orgs"; do
    [[ $template ]] && break
  done
  if [[ -n "$template" ]]; then
    . <(aws s3 cp s3://$(ah_var AH_BUCKET)/etc/${template}.conf - \
        --region $AH_MASTER_REGION \
        |grep . |sed 's@^@export @')
  fi
fi

while true; do
  if ! $update; then
    while ah_select -p "Launch into VPC? " AH_ENV_VPC "$avail_vpcs"; do
      [[ $AH_ENV_VPC ]] && break
    done
  fi

  ah_select -p "Use existing ${AH_ENV_VPC:+VPC }security group? " AH_ENV_SGS "$(vpc_avail_sgs $AH_ENV_VPC)"

  if [[ ! $AH_ENV_VPC ]]; then
    if ! $update; then
      while ah_select -p "Enable classic link to VPC? " AH_ENV_CL_VPC "$avail_vpcs"; do
        [[ $AH_ENV_CL_VPC ]] && break
      done
    fi

    if [[ $AH_ENV_CL_VPC ]]; then
      ah_select -p "Use existing VPC security group for classic link? " AH_ENV_CL_VPC_SGS "$(vpc_avail_sgs $AH_ENV_CL_VPC)"
    fi

    while true; do
      ah_select -mp "Availability zones to launch instances in? " AH_ENV_AZS "$avail_azs" \
        || [[ -z "$AH_ENV_AZS" ]] \
        || break
    done
  else
    sn=$(echo "$avail_subnets" |awk -F '	' -v VPC=$AH_ENV_VPC '$1 == VPC {print $2 "\t" $3}')
    [[ ! $sn ]] && ah_warning "VPC contains no subnets\n" && continue
    while true; do
      ah_select -mp "Subnets for VPC? " AH_ENV_SUBNETS "$sn" \
        || [[ -z "$AH_ENV_SUBNETS" ]] \
        || break
    done

    AH_ENV_PUBLIC_IP=${AH_ENV_PUBLIC_IP:=true}
    ah_select -v AH_ENV_PUBLIC_IP "true	assign public IPs to instances"
  fi

  if ! $update; then
    ah_text_input -p "Billing group? " AH_BILLING_GROUP
    ah_text_input -p "Billing project? " AH_BILLING_PROJECT
  fi

  while ah_select -p "Machine image? " AH_ENV_IMAGE "$avail_images"; do
    [[ "$AH_ENV_IMAGE" ]] && break
  done

  while ah_select -p "SSH key pair to use? " AH_ENV_KEY "$avail_keys"; do
    [[ "$AH_ENV_KEY" ]] && break
  done

  while ah_select -p "Instance type? " AH_ENV_TYPE "$avail_instance_types"; do
    [[ "$AH_ENV_TYPE" ]] && break
  done

  vars=$(printenv |grep -E '^AH_(ENV_|BILLING_)' |sort)

  echo
  echo "$vars"
  echo

  read -sn 1 -p "$(ah_bold "Approve? [")yN$(ah_bold "] ")" approve
  [[ "$approve" == "y" ]] && echo && break;

  echo
  echo "Okay, starting over (ctrl-c to abort)."
  echo
done

extra_policies=$($policies_script 2>/dev/null)
policies=$({ echo "$default_policies" ; echo "$extra_policies" ; } |jt % |paste -sd '')
export AH_ENV_INLINE_POLICY=$policies

AH_ASG_NEW=$(save_asg_config)
AH_LC_NEW=$(save_lc_config)
AH_ROLE_NEW=$(save_role_config)

[[ "$AH_ASG_NEW" != "$AH_ASG_SAVED" ]] && asg_changed=true || asg_changed=false
[[ "$AH_LC_NEW"  != "$AH_LC_SAVED"  ]] && lc_changed=true  || lc_changed=false

# Only enable policy updating if the json file exists. Otherwise assume that
# role policies are managed externally.
if [[ -f $policies_script ]] && [[ "$AH_ROLE_NEW"  != "$AH_ROLE_SAVED" ]]; then
  role_changed=true
else
  role_changed=false
fi

# Specifying both AZs and subnets is redundant and a cause of validation errors.
[[ $AH_ENV_SUBNETS ]] && AH_ENV_AZS=

if ! $lc_changed; then
  echo
  read -sn 1 -p "$(ah_bold "Launch config settings unchanged. Update launch config anyway? [")yN$(ah_bold "] ")" approve
  [[ "$approve" == "y" ]] && lc_changed=true
  echo
fi

if $update && $role_changed; then
  echo
  which colordiff >/dev/null 2>&1 && diff=colordiff || diff=diff
  $diff --side-by-side \
    <(role_policy_inline_json "$AH_ENV_INLINE_POLICY_SAVED" |jq -S .) \
    <(role_policy_inline_json "$AH_ENV_INLINE_POLICY" |jq -S .)
  echo
  read -sn 1 -p "$(ah_bold "Update role inline policies (see diff above)? [")yN$(ah_bold "] ")" approve
  [[ "$approve" == "y" ]] || role_changed=false
  echo
fi

echo
exit

if ! $update; then
  ah_try -m "Creating role..." \
    aws iam create-role \
      --path /ah/ \
      --role-name $AH_ENV \
      --assume-role-policy-document "$role_policy_json" \
      > /dev/null

  ah_try -m "Attaching app policy..." \
    aws iam attach-role-policy \
      --role-name $AH_ENV \
      --policy-arn $(ah_policy_arn ah/$AH_APP) \
      > /dev/null

  ah_try -m "Creating instance profile..." \
    aws iam create-instance-profile \
      --path /ah/ \
      --instance-profile-name $AH_ENV \
      > /dev/null

  ah_try -m "Adding role to instance profile..." \
    aws iam add-role-to-instance-profile \
      --role-name $AH_ENV \
      --instance-profile-name $AH_ENV \
      > /dev/null

  # creating security groups:
  # -vpc                create vpc sg
  # -classic link       create vpc sg and ec2 classic sg
  # -ec2 classic        create ec2 classic sg

  if [[ $AH_ENV_VPC ]]; then
    sg_vpc_id=$AH_ENV_VPC
  elif [[ $AH_ENV_CL_VPC ]]; then
    sg_vpc_id=$AH_ENV_CL_VPC
    # for classic link we create an sg in the vpc and in ec2 classic
    if [[ ! $AH_ENV_SGS ]]; then
      AH_ENV_SGS=$(ah_try -m "Creating SG in EC2 classic..." \
        aws ec2 create-security-group \
          --group-name $AH_ENV \
          --description "Ah security group for the $AH_ENV environment, $AH_APP application." \
          | jt GroupId %)

      [[ ! $AH_ENV_SGS ]] && ah_die "could not create security group"

      aws ec2 create-tags \
        --resources $AH_ENV_SGS \
        --tags Key=Name,Value=${AH_ENV} \
               Key=BillingGroup,Value=${AH_BILLING_GROUP} \
               Key=BillingProject,Value=${AH_BILLING_PROJECT} \
               Key=AhApplication,Value=$AH_APP \
               Key=AhEnvironment,Value=$AH_ENV
    fi
  fi

  if [[ $AH_ENV_CL_VPC && ! $AH_ENV_CL_VPC_SGS ]] \
    || [[ ! $AH_ENV_CL_VPC && ! $AH_ENV_SGS ]]; then
    created_sgs=$(ah_try -m "Creating SG in ${sg_vpc_id:-EC2 classic}..." \
      aws ec2 create-security-group \
        --group-name $AH_ENV \
        --description "Ah security group for the $AH_ENV environment, $AH_APP application." \
        ${sg_vpc_id:+--vpc-id $sg_vpc_id} \
      |jt GroupId %)

    [[ ! $created_sgs ]] && ah_die "could not create security group"

    aws ec2 create-tags \
      --resources $created_sgs \
      --tags Key=Name,Value=${AH_ENV}${AH_ENV_CL_VPC:+-classic-link} \
             Key=BillingGroup,Value=${AH_BILLING_GROUP} \
             Key=BillingProject,Value=${AH_BILLING_PROJECT} \
             Key=AhApplication,Value=$AH_APP \
             Key=AhEnvironment,Value=$AH_ENV

    if [[ $AH_ENV_CL_VPC ]]; then
      AH_ENV_CL_VPC_SGS=$created_sgs
    else
      AH_ENV_SGS=$created_sgs
    fi
  fi
  echo done.
fi

if ! $update || $lc_changed; then
  AH_ENV_LC_NEW="${AH_ENV}-$(date +'%Y-%m-%d-%H%M%S-%s')"
  AH_ENV_PUBLIC_IP=${AH_ENV_PUBLIC_IP:+--associate-public-ip-address}
  AH_ENV_PUBLIC_IP=${AH_ENV_PUBLIC_IP:---no-associate-public-ip-address}

  ah_retry -m "Creating launch configuration..." \
    aws autoscaling create-launch-configuration \
      --launch-configuration-name $AH_ENV_LC_NEW \
      --image-id $AH_ENV_IMAGE \
      --key-name $AH_ENV_KEY \
      --security-groups $AH_ENV_SGS \
      --user-data "$(cat $AH_SHR/user-data.sh |envsubst '$AH_APP:$AH_ENV:$AH_BUCKET:$AH_MASTER_REGION')" \
      --instance-type $AH_ENV_TYPE \
      --iam-instance-profile $(ah_instance_profile_arn ah/$AH_ENV) \
      ${AH_ENV_CL_VPC:+--classic-link-vpc-id $AH_ENV_CL_VPC} \
      ${AH_ENV_CL_VPC_SGS:+--classic-link-vpc-security-groups $AH_ENV_CL_VPC_SGS} \
      ${AH_ENV_VPC:+$AH_ENV_PUBLIC_IP} \
      > /dev/null
fi

if ! $update || $role_changed; then
  $update && op=Updating || op=Creating
  ah_try -m "$op inline policy for IAM role..." \
    aws iam put-role-policy \
      --role-name $AH_ENV \
      --policy-name ec2-describe-tags \
      --policy-document "$(role_policy_inline_json "$AH_ENV_INLINE_POLICY")" \
      > /dev/null
fi

if ! $update; then
  ah_try -m "Creating autoscaling group..." \
    aws autoscaling create-auto-scaling-group \
      --auto-scaling-group-name $AH_ENV \
      --launch-configuration-name $AH_ENV_LC_NEW \
      --min-size 0 \
      --max-size 0 \
      --desired-capacity 0 \
      --tags "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhApplication,Value=$AH_APP" \
             "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhEnvironment,Value=$AH_ENV" \
             "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=Name,Value=$AH_ENV" \
             "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingGroup,Value=$AH_BILLING_GROUP" \
             "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingProject,Value=$AH_BILLING_PROJECT" \
      ${AH_ENV_SUBNETS:+--vpc-zone-identifier $(echo $AH_ENV_SUBNETS |tr -s '[ ]' '[,]')} \
      ${AH_ENV_AZS:+--availability-zones $AH_ENV_AZS} \
      > /dev/null

  ah_try -m "Enabling metrics on autoscaling group..." \
    aws autoscaling enable-metrics-collection \
      --auto-scaling-group-name $AH_ENV \
      --granularity 1Minute \
      > /dev/null
elif $asg_changed && $lc_changed; then
  ah_try -m "Updating autoscaling group..." \
    aws autoscaling update-auto-scaling-group \
      --auto-scaling-group-name $AH_ENV \
      --launch-configuration-name $AH_ENV_LC_NEW \
      ${AH_ENV_SUBNETS:+--vpc-zone-identifier $(echo $AH_ENV_SUBNETS |tr -s '[ ]' '[,]')} \
      ${AH_ENV_AZS:+--availability-zones $AH_ENV_AZS} \
      > /dev/null
elif $asg_changed && ! $lc_changed; then
  ah_try -m "Updating autoscaling group..." \
    aws autoscaling update-auto-scaling-group \
      --auto-scaling-group-name $AH_ENV \
      --launch-configuration-name $AH_ENV_LC \
      ${AH_ENV_SUBNETS:+--vpc-zone-identifier $(echo $AH_ENV_SUBNETS |tr -s '[ ]' '[,]')} \
      ${AH_ENV_AZS:+--availability-zones $AH_ENV_AZS} \
      > /dev/null
elif ! $asg_changed && $lc_changed; then
  ah_try -m "Updating autoscaling group..." \
    aws autoscaling update-auto-scaling-group \
      --auto-scaling-group-name $AH_ENV \
      --launch-configuration-name $AH_ENV_LC_NEW \
      > /dev/null
fi

if $lc_changed && [ -n "$AH_ENV_LC" ]; then
  ah_try -m "Deleting old launch config ($AH_ENV_LC)..." \
    aws autoscaling delete-launch-configuration \
      --launch-configuration-name $AH_ENV_LC \
      > /dev/null
fi
