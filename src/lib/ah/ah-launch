#!/usr/bin/env bash

[[ -z "$AH_APP" ]] && ah_die "application not configured: do '$AH init'"
[[ -z "$AH_ENV" ]] && ah_die "no environment set: do '$AH env <env>'"

ah_check "app policy exists" ah_policy_exists || ah_die "aborted."
ah_check "SG does not already exist" ah_not ah_sg_exists $AH_ENV || ah_die "aborted."
ah_check "role does not already exist" ah_not ah_role_exists $AH_ENV || ah_die "aborted."
ah_check "instance profile does not already exist" ah_not ah_instance_profile_exists $AH_ENV || ah_die "aborted."
ah_check "launch configuration does not already exist" ah_not ah_launch_config_exists $AH_ENV || ah_die "aborted."
ah_check "autoscaling group does not already exist" ah_not ah_asg_exists $AH_ENV || ah_die "aborted."

echo -n "Loading options..."
IMAGES=$(aws ec2 describe-images --owners $(ah_account_id) |jt Images [ ImageId % ] [ Name % ])
KEYS=$(aws ec2 describe-key-pairs --no-paginate |jt KeyPairs [ KeyName % ])
ORGS=$(ah_s3_ls etc |sed 's@\.conf$@@')
echo "done."

PS3="Org to use as a template? "
select template in $ORGS; do
  if [[ -n "$template" ]]; then
    . <(aws s3 cp s3://$AH_BUCKET/etc/${template}.conf - |grep . |sed 's@^@export @')
    break
  fi
done

while true; do
  dfl="$AH_REGION"
  read -p "AWS Region? [${AH_REGION:-$dfl}] " AH_REGION
  export AH_REGION="${AH_REGION:=$dfl}"

  dfl="$AH_DEFAULT_SGS"
  read -p "SGs for default ingress rules (all access)? [${AH_DEFAULT_SGS:-$dfl}] " AH_DEFAULT_SGS
  export AH_DEFAULT_SGS="${AH_DEFAULT_SGS:=$dfl}"

  dfl="$AH_AZS"
  read -p "Availability zones in which to launch instances? [${AH_AZS:-$dfl}] " AH_AZS
  export AH_AZS="${AH_AZS:=$dfl}"

  dfl="$AH_BILLING_GROUP"
  read -p "Billing group? [${AH_BILLING_GROUP:-$dfl}] " AH_BILLING_GROUP
  export AH_BILLING_GROUP="${AH_BILLING_GROUP:=$dfl}"

  dfl="$AH_BILLING_PROJECT"
  read -p "Billing project? [${AH_BILLING_PROJECT:-$dfl}] " AH_BILLING_PROJECT
  export AH_BILLING_PROJECT="${AH_BILLING_PROJECT:=$dfl}"

  PS3="Machine image? "
  select AH_MACHINE_IMAGE in $(echo "$IMAGES" |cut -f2 |sort); do
    [[ -n "$AH_MACHINE_IMAGE" ]] && break
  done
  export AH_MACHINE_IMAGE

  PS3="Key pair? "
  select AH_KEY_PAIR in $(echo "$KEYS" |sort); do
    [[ -n "$AH_KEY_PAIR" ]] && break
  done
  export AH_KEY_PAIR

  dfl="m3.medium"
  read -p "Instance type? [${AH_INSTANCE_TYPE:-$dfl}] " AH_INSTANCE_TYPE
  export AH_INSTANCE_TYPE="${AH_INSTANCE_TYPE:=$dfl}"

  vars=$(set |grep -E '^AH_(REGION|AZS|DEFAULT_SGS|BILLING_GROUP|BILLING_PROJECT|ENV|MACHINE_IMAGE|KEY_PAIR|INSTANCE_TYPE)=')

  echo
  echo "$vars"
  echo

  read -sn 1 -p "Approve? [yN] " approve
  [[ "$approve" == "y" ]] && echo && break;

  echo
  echo "Okay, starting over (ctrl-c to abort)."
  echo
done

EC2_ASSUME_ROLE=$(cat <<EOT
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      }
    }
  ]
}
EOT
)

echo -n "Creating role..."
aws iam create-role \
  --path /ah/ \
  --role-name $AH_ENV \
  --assume-role-policy-document "$EC2_ASSUME_ROLE" \
  > /dev/null
echo done.

echo -n "Attaching app policy..."
aws iam attach-role-policy \
  --role-name $AH_ENV \
  --policy-arn $(ah_policy_arn ah/$AH_APP) \
  > /dev/null
echo done.

echo -n "Creating instance profile..."
aws iam create-instance-profile \
  --path /ah/ \
  --instance-profile-name $AH_ENV \
  > /dev/null
echo done.

echo -n "Adding role to instance profile..."
aws iam add-role-to-instance-profile \
  --role-name $AH_ENV \
  --instance-profile-name $AH_ENV \
  > /dev/null
echo done.

echo -n "Creating SG..."
aws ec2 create-security-group \
  --group-name $AH_ENV \
  --description "Ah security group for the $AH_ENV environment, $AH_APP application." \
  > /dev/null
echo done.

echo -n "Authorizing default ingress rules..."
for i in $(echo $AH_DEFAULT_SGS |tr '[ ]' '[,]' |awk -vRS=, '{print}' |grep .); do
  for j in tcp udp icmp; do
    if [[ $j == icmp ]]; then p=-1; else p=0-65535; fi
    aws ec2 authorize-security-group-ingress \
      --group-name $AH_ENV \
      --protocol $j \
      --port $p \
      --source-group $i \
      > /dev/null
  done
done
echo done.

AH_MACHINE_IMAGE_ID=$(echo "$IMAGES" |awk "\$2 ==\"$AH_MACHINE_IMAGE\" {print \$1}")

while ah_not ah_check "instance profile exists" ah_instance_profile_exists $AH_ENV; do
  echo waiting
done

echo -n "Creating launch configuration..."
aws autoscaling create-launch-configuration \
  --launch-configuration-name $AH_ENV \
  --image-id $AH_MACHINE_IMAGE_ID \
  --key-name $AH_KEY_PAIR \
  --security-groups $AH_ENV \
  --user-data "$(cat $AH_SHR/user-data.sh |envsubst '$AH_APP:$AH_ENV:$AH_BUCKET:$AH_REGION')" \
  --instance-type $AH_INSTANCE_TYPE \
  --iam-instance-profile $(ah_instance_profile_arn ah/$AH_ENV) \
  > /dev/null
echo done.

AZS=$(echo $AH_AZS |tr '[ ]' '[,]' |awk -vRS=, '{print}' |grep . |sed "s/^/$AH_REGION/")

echo -n "Creating autoscaling group..."
aws autoscaling create-auto-scaling-group \
  --auto-scaling-group-name $AH_ENV \
  --launch-configuration-name $AH_ENV \
  --min-size 0 \
  --max-size 0 \
  --desired-capacity 0 \
  --availability-zones $AZS \
  --tags "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhApplication,Value=$AH_APP" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhEnvironment,Value=$AH_ENV" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=Name,Value=$AH_ENV" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingGroup,Value=$AH_BILLING_GROUP" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingProject,Value=$AH_BILLING_PROJECT" \
  > /dev/null
echo done.
