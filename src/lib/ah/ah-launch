#!/usr/bin/env bash

# ah_check "app policy exists" ah_policy_exists || ah_die "aborted."
# ah_check "SG does not already exist" ah_not ah_sg_exists $(ah_var AH_ENV) || ah_die "aborted."
# ah_check "role does not already exist" ah_not ah_role_exists $AH_ENV || ah_die "aborted."
# ah_check "instance profile does not already exist" ah_not ah_instance_profile_exists $AH_ENV || ah_die "aborted."
# ah_check "launch configuration does not already exist" ah_not ah_launch_config_exists $AH_ENV || ah_die "aborted."
# ah_check "autoscaling group does not already exist" ah_not ah_asg_exists $AH_ENV || ah_die "aborted."

echo -n "Loading options..."
IMAGES=$(aws ec2 describe-images --owner $(ah_account_id) |jt Images [ ImageId % ] [ Name % ] | sort -k2)
if [[ -z "$IMAGES" ]]; then
  ah_die "cannot find any valid AMIs in your account"
fi
KEYS=$(aws ec2 describe-key-pairs --no-paginate |jt KeyPairs [ KeyName % ])
if [[ -z "$KEYS" ]]; then
  ah_die "cannot find any valid key pairs in your account"
fi
ORGS=$(ah_s3_ls etc |sed 's@\.conf$@@')
SGS=$(ah_list_sgs)
AZS=$(ah_list_azs)
echo "done."

PS3="Org to use as a template? "
select template in $ORGS; do
  if [[ -n "$template" ]]; then
    . <(aws s3 cp s3://$(ah_var AH_BUCKET)/etc/${template}.conf - |grep . |sed 's@^@export @')
    break
  fi
done

while true; do
  export AH_DEFAULT_SGS=$(echo "$SGS" \
                            |ah_checklist "Select Security Groups" $(echo "$AH_DEFAULT_SGS"| tr '[,]' '[\t]') \
                            |tr '[\n]' '[,]' |sed -e 's/,$//')

  export AH_AZS=$(ah_list_azs | awk '{print $1 "\t" $1}' \
                    |ah_checklist "Select Availability Zones" $(echo "$AH_AZS"| tr [,] "[\t]") \
                    |tr '[\n]' '[,]' |sed -e 's/,$//')

  export AH_BILLING_GROUP=$(ah_inputbox "Billing Group" $AH_BILLING_GROUP | tr -d '[\n]')

  export AH_BILLING_PROJECT=$(ah_inputbox "Billing Project" $AH_BILLING_PROJECT | tr -d '[\n]')

  export AH_MACHINE_IMAGE=$(echo "$IMAGES" | ah_select "Select AMI" $AH_MACHINE_IMAGE_ID | tr -d '[\n]')

  export AH_KEY_PAIR=$(echo "$KEYS" | awk '{print $1 "\t" $1}' \
                         |ah_select "Select Key Pair" \
                         |tr -d '[\n]')

  export AH_INSTANCE_TYPE=$(ah_inputbox "Instance Type" "m3.medium")

  echo "AH_AZS=$AH_AZS"

  vars=$(set |grep -E '^AH_(AZS|DEFAULT_SGS|BILLING_GROUP|BILLING_PROJECT|ENV|MACHINE_IMAGE|KEY_PAIR|INSTANCE_TYPE)=')
  echo
  echo "$vars"
  echo

  read -sn 1 -p "Approve? [yN] " approve
  [[ "$approve" == "y" ]] && echo && break;

  exit 0
  echo
  echo "Okay, starting over (ctrl-c to abort)."
  echo
done

EC2_ASSUME_ROLE=$(cat <<EOT
{
  "Version": "2012-10-17",

  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      }
    }
  ]
}
EOT
)

echo -n "Creating role..."
aws iam create-role \
  --path /ah/ \
  --role-name $AH_ENV \
  --assume-role-policy-document "$EC2_ASSUME_ROLE" \
  > /dev/null
echo done.

echo -n "Attaching app policy..."
aws iam attach-role-policy \
  --role-name $AH_ENV \
  --policy-arn $(ah_policy_arn ah/$AH_APP) \
  > /dev/null
echo done.

echo -n "Creating instance profile..."
aws iam create-instance-profile \
  --path /ah/ \
  --instance-profile-name $AH_ENV \
  > /dev/null
echo done.

echo -n "Adding role to instance profile..."
aws iam add-role-to-instance-profile \
  --role-name $AH_ENV \
  --instance-profile-name $AH_ENV \
  > /dev/null
echo done.

echo -n "Creating SG..."
aws ec2 create-security-group \
  --group-name $AH_ENV \
  --description "Ah security group for the $AH_ENV environment, $AH_APP application." \
  > /dev/null
echo done.

echo -n "Authorizing default ingress rules..."
for i in $(echo $AH_DEFAULT_SGS |tr '[ ]' '[,]' |awk -vRS=, '{print}' |grep .); do
  for j in tcp udp icmp; do
    if [[ $j == icmp ]]; then p=-1; else p=0-65535; fi
    aws ec2 authorize-security-group-ingress \
      --group-name $AH_ENV \
      --protocol $j \
      --port $p \
      --source-group $i \
      > /dev/null
  done
done
echo done.

AH_MACHINE_IMAGE_ID=$(echo "$IMAGES" |awk "\$2 ==\"$AH_MACHINE_IMAGE\" {print \$1}")

while ah_not ah_check "instance profile exists" ah_instance_profile_exists $AH_ENV; do
  echo waiting
done

echo -n "Creating launch configuration..."
aws autoscaling create-launch-configuration \
  --launch-configuration-name $AH_ENV \
  --image-id $AH_MACHINE_IMAGE_ID \
  --key-name $AH_KEY_PAIR \
  --security-groups $AH_ENV \
  --user-data "$(cat $AH_SHR/user-data.sh |envsubst '$AH_APP:$AH_ENV:$AH_BUCKET')" \
  --instance-type $AH_INSTANCE_TYPE \
  --iam-instance-profile $(ah_instance_profile_arn ah/$AH_ENV) \
  > /dev/null
echo done.

region=$(aws configure list |awk '$1 == "region" {print $2}')
AZS=$(echo "$AH_AZS" |tr '[ ]' '[,]' |awk -vRS=, '{print}' |grep . |sed "s/^/$region/")

echo -n "Creating autoscaling group..."
aws autoscaling create-auto-scaling-group \
  --auto-scaling-group-name $AH_ENV \
  --launch-configuration-name $AH_ENV \
  --min-size 0 \
  --max-size 0 \
  --desired-capacity 0 \
  --availability-zones $AZS \
  --tags "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhApplication,Value=$AH_APP" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=AhEnvironment,Value=$AH_ENV" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=Name,Value=$AH_ENV" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingGroup,Value=$AH_BILLING_GROUP" \
         "ResourceId=$AH_ENV,ResourceType=auto-scaling-group,Key=BillingProject,Value=$AH_BILLING_PROJECT" \
  > /dev/null
echo done.
