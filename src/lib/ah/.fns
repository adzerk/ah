#!/bin/bash

## colors
###############################################################################

ah_bold()    { echo -ne "\033[1m$1\033[0m"; }
ah_red()     { echo -ne "\033[31m$1\033[0m"; }
ah_green()   { echo -ne "\033[32m$1\033[0m"; }
ah_yellow()  { echo -ne "\033[33m$1\033[0m"; }
ah_blue()    { echo -ne "\033[34m$1\033[0m"; }

## logging
###############################################################################

ah_info()    { ah_bold "$1" 1>&2 ; }
ah_notice()  { ah_bold "$(ah_blue "$1")" 1>&2 ; }
ah_warning() { ah_bold "$(ah_yellow "$1")" 1>&2 ; }
ah_error()   { ah_bold "$(ah_red "$1")" 1>&2 ; }
ah_success() { ah_bold "$(ah_green "$1")" 1>&2 ; }
ah_clearln() { printf "\r\033[K" 1>&2 ; }

## helpers
###############################################################################

ah_var() {
  local val=${!1}
  if [[ -z "$val" ]]; then
    case "$1" in
      AH_BUCKET|AH_APP|AH_TARGET|AH_MASTER_REGION|AH_BILLING_GROUP|AH_BILLING_PROJECT)
        ah_die "$1 not set: do '$AH init'" ;;
      AH_ENV)
        ah_die "$1 not set: do '$AH env <name>'" ;;
    esac
  fi
  echo "$val"
}

ah_try() {
  local OPTIND OPTARG ret err tmp=$(mktemp) msg="Working..." force=false

  while getopts ":fm:" o; do
    case $o in
      f) force=true ;;
      m) msg=$OPTARG ;;
    esac
  done
  shift $((OPTIND-1))

  ah_info "$msg"
  "$@" 2> $tmp
  ret=$?
  err=$(cat $tmp)
  rm -f $tmp
  [[ $ret -eq 0 ]] \
    && ah_success "done.\n" \
    || { ah_error "failed.\n"; if $force; then echo "$err" 1>&2; else ah_die "$err"; fi; }
  return $ret
}

ah_retry() {
  until ah_try -f "$@"; do sleep .25; done
}

# Returns the S3 location of the git repo for this app.
ah_repo() {
  echo $(ah_var AH_BUCKET)/repo/$1
}

# Returns the S3 location of the secrets for this app.
ah_secret() {
  echo $(ah_var AH_BUCKET)/secrets/$1
}

# Returns the S3 location of the data folder for this app.
ah_data() {
  echo $(ah_var AH_BUCKET)/data/$1
}

ah_bin() {
  echo $(ah_var AH_BUCKET)/bin
}

# Returns the ARN of the specified S3 location.
ah_s3_arn() {
  echo arn:aws:s3:::$1
}

# Returns the ARN of the specified policy name.
ah_policy_arn() {
  echo arn:aws:iam::$(ah_account_id):policy/$1
}

ah_s3_ls() {
  local prefix=$(echo "$1" |sed 's@//*$@@')
  local bucket=$(ah_var AH_BUCKET)

  aws s3api list-objects \
    --region $AH_MASTER_REGION \
    --bucket $(ah_var AH_BUCKET) \
    --prefix "$prefix" \
    |jt Contents Key % \
    |sed "s@^${prefix}/@@"
}

# Returns the ARN of the specified instance profile name.
ah_instance_profile_arn() {
  echo arn:aws:iam::$(ah_account_id):instance-profile/$1
}

ah_not() {
  if "$@"; then
    return 1
  else
    return 0
  fi
}

ah_check() {
  local what=$1
  local abort=no
  shift
  echo -n "$(ah_info "Checking ${what}...")"
  if "$@" > /dev/null 2>&1; then
    ah_success "[PASS]\n"
  else
    ah_error "[FAIL]\n"
    abort=yes
  fi

  if [[ $abort == yes ]]; then
    return 1
  fi
}

ah_git_hash() {
  git show-ref --hash $(git symbolic-ref HEAD)
}

## account info
###############################################################################

# Returns the AWS account ID associated this user.
ah_account_id() {
  aws iam get-user |jt User Arn % |awk -F: '{print $5}'
}

# Returns the first alias for the AWS account associated with this user.
ah_account_alias() {
  aws iam list-account-aliases |jt AccountAliases % |head -1
}

## policies
###############################################################################

ah_policy_exists() {
  local name=${1:-$(ah_var AH_APP)}
  aws iam list-policies \
    |jt Policies [ PolicyName % ] \
    |grep -q "^${name}\$"
}

## vpcs
###############################################################################

ah_list_vpcs() {
  aws ec2 describe-vpcs \
      |jt Vpcs [ VpcId ]
}

## security groups
###############################################################################

ah_sg_exists() {
  local name=$1
  aws ec2 describe-security-groups --no-paginate --filters "Name=group-name,Values=$name" \
    |jt SecurityGroups [ GroupName % ] \
    |grep -q "^${name}\$"
}

ah_sg_id_by_name() {
  local name=$1
  aws ec2 describe-security-groups --no-paginate --filters "Name=group-name,Values=$1" \
    | jt SecurityGroups GroupId %
}

ah_sg_info() {
  local name=$1
  aws ec2 describe-security-groups --no-paginate --filters "Name=group-name,Values=$name"
}

ah_sg_vpc() {
  local info=$1
  echo "$info" |jt SecurityGroups [ VpcId % ]
}

## roles
###############################################################################

ah_role_exists() {
  local name=$1
  aws iam list-roles --no-paginate \
    |jt Roles [ RoleName % ] \
    |grep -q "^${name}\$"
}

ah_create_role() {
  local name=$1

}

ah_role_policy_arns() {
  local name=$1
  aws iam list-attached-role-policies --role-name $name \
    |jt AttachedPolicies [ PolicyArn % ] \
    |sort
}

ah_inline_role_policy_names() {
  local name=$1
  aws iam list-role-policies --role-name $name \
    |jt PolicyNames % \
    |sort
}

ah_secret_policy_arns() {
  aws iam list-policies --path-prefix /ah/secrets/ \
      |jt Policies Arn % \
      |sort
}

ah_detach_all_role_policies() {
  local role_name=$1
  ah_role_policy_arns $role_name \
    |while read arn; do
    aws iam detach-role-policy \
        --role-name $role_name \
        --policy-arn $arn
    # TODO (maybe): If the policy isn't attached to any other roles, prompt the
    # user to delete it.
  done
}

ah_delete_inline_role_policies() {
  local role_name=$1
  ah_inline_role_policy_names $role_name \
    |while read policy_name; do
    aws iam delete-role-policy \
        --role-name $role_name \
        --policy-name $policy_name
  done
}

## grants
###############################################################################

ah_all_grants() {
  aws iam list-policies \
    |jt Policies [ Path % ] [ PolicyName % ] \
    |awk '$1 == "/ah/secrets/" {print $2}' \
    |awk -F= '{print $1 "\t" $2}' \
    |sort
}

ah_grants() {
  local env=$1
  ah_all_grants |awk -F'	' -vENV=$1 '$2 == ENV {print $1}'
}

ah_update_grants_index() {
  ah_grants $(ah_var AH_ENV) \
    |aws s3 cp - "s3://$(ah_data)/$(ah_var AH_APP)/$(ah_var AH_ENV).grants" \
      --region $(ah_var AH_MASTER_REGION)
}

## instance profiles
###############################################################################

ah_instance_profile_exists() {
  local name=$1
  aws iam list-instance-profiles \
    |jt InstanceProfiles [ InstanceProfileName % ] \
    |grep -q "^${name}\$"
}

## launch configurations
###############################################################################

ah_launch_config_exists() {
  local name=$1
  aws autoscaling describe-launch-configurations \
    --launch-configuration-names $name \
    |jt LaunchConfigurations [ LaunchConfigurationName % ] \
    |grep -q "^${name}\$"
}

ah_launch_config_info() {
  local name=$1
  aws autoscaling describe-launch-configurations \
    --launch-configuration-names $name
}

ah_launch_config_image_id() {
  local info=$1
  echo "$info" |jt LaunchConfigurations [ ImageId % ]
}

ah_launch_config_key_name() {
  local info=$1
  echo "$info" |jt LaunchConfigurations [ KeyName % ]
}

ah_launch_config_security_groups() {
  local info=$1
  echo "$info" |jt LaunchConfigurations [ SecurityGroups % ]
}

ah_launch_config_classic_link_vpc_id() {
  local info=$1
  echo "$info" |jt LaunchConfigurations [ ClassicLinkVPCId % ]
}

ah_launch_config_classic_link_security_groups() {
  local info=$1
  echo "$info" |jt LaunchConfigurations [ ClassicLinkSecurityGroups % ]
}

ah_launch_config_associate_public_ip() {
  local info=$1
  echo "$info" |jt LaunchConfigurations [ AssociatePublicIpAddress % ]
}

ah_launch_config_instance_type() {
  local info=$1
  echo "$info" |jt LaunchConfigurations [ InstanceType % ]
}

## autoscaling groups
###############################################################################

ah_asg_exists() {
  local name=$1
  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names $name \
    |jt AutoScalingGroups [ AutoScalingGroupName % ] \
    |grep -q "^${name}\$"
}

ah_asg_info() {
  local name=$1
  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names $name
}

ah_asg_launch_config_name() {
  local info=$1
  echo "$info" |jt AutoScalingGroups [ LaunchConfigurationName % ]
}

ah_asg_vpc_subnets() {
  local info=$1
  echo "$info" |jt AutoScalingGroups [ VPCZoneIdentifier % ] |tr '[,]' '[ ]'
}

ah_asg_azs() {
  local info=$1
  echo $(echo "$info" |jt AutoScalingGroups [ AvailabilityZones % ])
}

## cross-platform utility fns
###############################################################################

ah_mktemp() {
  case $(uname -s) in
    Darwin) mktemp -t temp ;;
    Linux) mktemp ;;
    *) (>&2 echo "Unknown system '$(uname -s)', don't now how to ah_mktemp");
       exit 1 ;;
  esac
}

ah_tar() {
  case $(uname -s) in
    Darwin) gtar $@;;
    Linux) tar $@;;
    *) (>&2 echo "Unknown system '$(uname -s)', don't now how to ah_tar");
       exit 1 ;;
  esac
}

## interactive pickers
###############################################################################

ah_select() {
  local OPTIND OPTARG o num prompt="Choose: " opts multi showval='$2 "\t"'

  while getopts ":mp:v" o; do
    case $o in
      m) multi='$4' ;;
      p) prompt=$OPTARG ;;
      v) showval= ;;
    esac
  done
  shift $((OPTIND-1))

  prompt=$(ah_bold "${prompt:-Choose: }")

  opts=$(echo "$2" \
    |while read line ; do
      echo -n "$(echo "$line" |awk -F'	' '{print $1 "\t" $2 "\t"}')"
      echo "${!1}" \
        |tr '[ ]' '[\n]' \
        |grep -q "^$(echo "$line" |awk '{print $1}')\$" \
        && echo -n "yes"
      echo
    done
  )

  echo "$opts" \
    | cat -n \
    | sed 's@^ *@@' \
    | sed 's@\t@)\t@' \
    | awk -F'	' "$(printf '$4 == "yes" {print $1 "\t■ " %s $3}
                           $4 != "yes" {print $1 "\t□ " %s $3}' "$showval" "$showval")" \
    | column -s '	' -t \
    | rs

  read -rp "$prompt" num

  if [[ -n "$num" ]]; then
    opts=$(echo "$opts" |cat -n \
      | awk -F'	' "$(printf '$1 == %d && $4 == "yes" {print $2 "\t" $3 "\t"}
                             $1 == %d && $4 == "" {print $2 "\t" $3 "\tyes"}
                             $1 != %d {print $2 "\t" $3 "\t" %s}' $num $num $num $multi 2>/dev/null)")

    eval "${1}='$(echo $(echo "$opts" |grep 'yes$' |cut -f1))'"
    true
  else
    false
  fi
}

ah_text_input() {
  local OPTIND OPTARG tmp prompt="Value: "

  while getopts ":p:" o; do
    case $o in
      p) prompt=$OPTARG ;;
    esac
  done
  shift $((OPTIND-1))

  tmp=${!1}

  echo -n "$(ah_bold "${prompt}[")${tmp}$(ah_bold "]") "
  read -r tmp
  [[ -z "$tmp" ]] && tmp=${!1}

  eval "${1}=$(printf '%q' "$tmp")"
}
