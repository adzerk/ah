#!/usr/bin/env bash

if ! [[ -t 0 ]]; then
  vars=$(cat)
else
  dfl=$(basename "$PWD")
  AH_APP=${AH_APP:-$dfl}
  AH_TARGET="${AH_TARGET:-target}"

  while true; do
    ah_text_input -p "S3 bucket for ah to use? " AH_BUCKET
    ah_text_input -p "AWS region for S3 bucket? " AH_MASTER_REGION
    ah_text_input -p "App name? " AH_APP
    ah_text_input -p "Target/binaries dir? " AH_TARGET
    ah_text_input -p "Billing group? " AH_BILLING_GROUP
    ah_text_input -p "Billing project? " AH_BILLING_PROJECT

    vars=$(set |grep -E '^AH_(BUCKET|MASTER_REGION|APP|TARGET|BILLING_GROUP|BILLING_PROJECT)=')

    echo
    echo "$vars"
    echo

    read -sn 1 -p "Approve? [yN] " approve
    [[ "$approve" == "y" ]] && echo && break;

    echo
    echo "Okay, starting over (ctrl-c to abort)."
    echo
  done
fi

echo
mkdir -p .ah || ah_die "can't create .ah directory"
ah_try -m "Writing .ah/ah.conf file..." \
  echo "$vars" > .ah/ah.conf

ah_check "policy does not already exist" ah_not ah_policy_exists || exit 0

S3_READONLY=$(cat <<EOT
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "$(ah_s3_arn $(ah_bin))/*",
        "$(ah_s3_arn $(ah_repo $AH_APP))/*",
        "$(ah_s3_arn $(ah_data $AH_APP))/*"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "$(ah_s3_arn $AH_BUCKET)"
      ]
    }
  ]
}
EOT
)

ah_try -m "Creating S3 access policy..." \
  aws iam create-policy \
    --path /ah/ \
    --policy-name $AH_APP \
    --description "Ah instance access to S3 bucket." \
    --policy-document "$S3_READONLY" \
    > /dev/null
